{"version":3,"file":"41e4f635fe9e037da47b.bundle.js","mappings":"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","sources":["webpack://multiple-choice-quiz/./src/renderText.ts","webpack://multiple-choice-quiz/./src/utils/ArrayToElementRenderer.ts","webpack://multiple-choice-quiz/./src/components/AnswerCheckbox/AnswerCheckbox.ts","webpack://multiple-choice-quiz/./src/components/AnswerCheckbox/AnswerCheckbox.html","webpack://multiple-choice-quiz/./src/components/Quiz/Quiz.ts","webpack://multiple-choice-quiz/./src/components/Quiz/Quiz.html"],"sourcesContent":["function translateFormula(f: string) {\n    return f.replace(/_([^\\{])/g, \"<sub>$1</sub>\")\n        .replace(/_\\{(\\S+?)\\}/g, \"<sub>$1</sub>\")\n        .replace(/\\^([^\\{])/g, \"<sup>$1</sup>\")\n        .replace(/\\^\\{(\\S+?)\\}/g, \"<sup>$1</sup>\");\n}\n\nexport function renderText(text: string) {\n    let re = /\\$(.+?)\\$/g;\n    let m;\n    do {\n        m = re.exec(text);\n        if (m) {\n            text = text.substr(0, m.index) + translateFormula(m[1]) + text.substr(m.index + m[0].length);\n        }\n    } while (m);\n    return text;\n}","export class ArrayToElementRenderer<T, E extends Element, K>{\n    private keyToElement: Map<K, E>;\n    private elementToKey: WeakMap<E, K>;\n    \n    constructor(private listElement: HTMLElement,\n        private keySelector: (x: T) => K,\n        private createElement: (x: T) => E) {\n        this.keyToElement = new Map<K, E>();\n        this.elementToKey = new WeakMap<E, K>();\n    }\n\n    update(list: T[], updateElement: (x: E, data: T) => void) {\n        let keyCache = new Map<T, K>();\n        let getKey = (d: T) => keyCache.get(d) || (() => {\n            let key = this.keySelector(d);\n            keyCache.set(d, key);\n            return key;\n        })();\n        for (let x of Array.from(this.listElement.children)) {\n            let el: E = <E>x;\n            let data = list.find(i => this.elementToKey.get(el) == getKey(i));\n            if (data) {\n                updateElement(<E>el, data);\n            }\n            else {\n                this.listElement.removeChild(el);\n            }\n        }\n        let before: Element = null;\n        let nextKeyToElement = new Map<K, E>();\n        for (let t of list) {\n            let key = getKey(t);\n            let childElement: E = this.keyToElement.get(key);\n            if (!childElement) {\n                childElement = this.createElement(t);\n                updateElement(childElement, t);\n                this.elementToKey.set(childElement, key);\n            }\n            nextKeyToElement.set(key, childElement);\n            if (null == before && childElement != this.listElement.firstElementChild) {\n                this.listElement.prepend(childElement);\n            }\n            else if (null != before && before.nextElementSibling != childElement) {\n                before.insertAdjacentElement(\"afterend\", childElement);\n            }\n            before = childElement;\n        }\n        this.keyToElement = nextKeyToElement;\n    }\n\n}","import { Answer } from \"../../Question\";\nimport { renderText } from \"../../renderText\";\nimport template from \"./AnswerCheckbox.html\";\nimport \"./AnswerCheckbox.scss\";\n\nexport class AnswerCheckbox extends HTMLElement {\n    reset() {\n        this.input.checked = false;\n    }\n    private input: HTMLInputElement;\n    label: HTMLLabelElement;\n    private reveal: HTMLSpanElement;\n\n    constructor() {\n        super();\n        this.innerHTML = template;\n        this.input = this.querySelector(\"input\");\n        this.label = this.querySelector(\"label\");\n        this.reveal = this.querySelector(\".answer-reveal\")\n    }\n\n    connectedCallback() {\n\n    }\n\n    disconnectedCallback() {\n\n    }\n\n    setData(idx: number, a: Answer, reveal: boolean) {\n        this.label.setAttribute(\"for\", this.input.id = `answer-${idx}`);\n        this.label.innerHTML = renderText(a.text);\n        this.input.name = \"\" + idx;\n        this.input.disabled = reveal;\n        if (reveal) {\n            this.classList.add(\"reveal\");\n        }\n        else {\n            this.classList.remove(\"reveal\");\n        }\n        [\"correct\", \"wrong\"].forEach(c => {\n            this.label.classList.remove(c);\n            this.reveal.classList.remove(c);\n        });\n        if (a.correct) {\n            this.reveal.title = \"this is a correct answer\";\n            this.reveal.classList.add(\"correct\");\n            this.label.classList.add(\"correct\");\n        } else {\n            this.reveal.title = \"this is a wrong answer\";\n            this.reveal.classList.add(\"wrong\");\n            this.label.classList.add(\"wrong\");\n        }\n    }\n}\n\ncustomElements.define(\"answer-checkbox\", AnswerCheckbox);\n","// Module\nvar code = \"<input type=\\\"checkbox\\\" class=\\\"answer-checkbox__input\\\"> <label class=\\\"answer-checkbox__label\\\"></label> <span class=\\\"answer-reveal\\\"></span>\";\n// Exports\nexport default code;","import { Answer, Question } from \"../../Question\";\nimport { renderText } from \"../../renderText\";\nimport { State } from \"../../State\";\nimport { ArrayToElementRenderer } from \"../../utils/ArrayToElementRenderer\";\nimport { AnswerCheckbox } from \"../AnswerCheckbox/AnswerCheckbox\";\nimport template from \"./Quiz.html\";\nimport \"./Quiz.scss\";\n\nexport class Quiz extends HTMLElement {\n    private loading: HTMLProgressElement;\n    private worker: Worker;\n    private questionText: HTMLHeadingElement;\n    private form: HTMLFormElement;\n    private answerRenderer: ArrayToElementRenderer<[number, Answer], AnswerCheckbox, number>;\n    private encryptionKeyForm: HTMLDivElement;\n    private decryptBtn: HTMLButtonElement;\n    access_token: string;\n    spreadsheetId: string;\n    quizfile: string;\n    private keyInput: HTMLInputElement;\n    private decryptFailed: HTMLDivElement;\n    private nextBtn: HTMLButtonElement;\n    private saveBtn: HTMLButtonElement;\n    question: Question;\n    private doneText: HTMLSpanElement;\n    private saveError: HTMLDivElement;\n    private saving: HTMLDivElement;\n    private questionSurface: HTMLDivElement;\n    private percent: HTMLSpanElement;\n    private total: HTMLSpanElement;\n    quizSettings: { numberOfQuestions: number; repeat: number; };\n\n    constructor() {\n        super();\n        this.innerHTML = template;\n        this.loading = this.querySelector(\"#loading\");\n        this.form = this.querySelector(\"form\");\n        this.answerRenderer = new ArrayToElementRenderer(this.form,\n            (s: [number, Answer]) => s[0], () => new AnswerCheckbox());\n        this.encryptionKeyForm = this.querySelector(\"#need-key\");\n        this.keyInput = this.querySelector(\"#key\");\n        this.decryptBtn = this.querySelector(\"#decrypt\");\n        this.decryptFailed = this.querySelector(\"#decryptFailed\");\n        this.nextBtn = this.querySelector(\"#next\");\n        this.saveBtn = this.querySelector(\"#save\");\n        this.doneText = this.querySelector(\"#done\");\n        this.saveError = this.querySelector(\"#saveError\");\n        this.saving = this.querySelector(\"#saving\");\n        this.total = this.querySelector(\"#total\");\n        this.percent = this.querySelector(\"#percent\");\n        this.questionSurface = this.querySelector(\".question\");\n        this.decryptBtn.addEventListener(\"click\", ev => {\n            this.worker.postMessage({\n                type: \"load\",\n                access_token: this.access_token,\n                spreadsheetId: this.spreadsheetId,\n                quizfile: this.quizfile,\n                decryptionKey: this.keyInput.value,\n                quizSettings: this.quizSettings\n            });\n        });\n        this.nextBtn.addEventListener(\"click\", () => {\n            this.worker.postMessage({\n                type: \"next\"\n            });\n        });\n        this.saveBtn.addEventListener(\"click\", () => {\n            let formData = new FormData(this.form);\n            this.worker.postMessage({\n                type: \"save\",\n                userAnswers: this.question.answers.map((a, idx) => formData.get(\"\" + idx) == \"on\")\n            });\n        });\n    }\n\n    connectedCallback() {\n        this.questionText = this.querySelector(\"#question\");\n    }\n\n    disconnectedCallback() {\n\n    }\n\n    async initialize(access_token: string, spreadsheetId: string, quizfile: string, quizSettings: { numberOfQuestions: number, repeat: number }) {\n        this.access_token = access_token;\n        this.spreadsheetId = spreadsheetId;\n        this.quizfile = quizfile;\n        this.quizSettings = quizSettings;\n        this.worker = new Worker(new URL(\"../../quizworker\", import.meta.url));\n        this.worker.addEventListener(\"message\", ev => {\n            let newState: State = ev.data;\n            if (newState.question) {\n                this.questionText.innerHTML = renderText(newState.question.text);\n                this.answerRenderer.update(newState.question.answers.map((a, idx) => [idx, a]), (c, d) => {\n                    c.setData(d[0], d[1], newState.reveal);\n                    if (!this.question || this.question.id != newState.question.id) {\n                        c.reset();\n                    }\n                });\n                this.total.innerText = `${newState.question.total} ${newState.question.total == 1 ? \"time\" : \"times\"}`;\n                this.percent.innerText = newState.question.total == 0 ? \"\" : `was answered ${Math.round(100 * (newState.question.correct / newState.question.total))}% correctly and`;\n                this.question = newState.question;\n            }\n            this.loading.style.display = newState.loading ? \"block\" : \"none\";\n            this.questionSurface.style.display = newState.question ? \"block\" : \"none\";\n            this.encryptionKeyForm.style.display = newState.needKey ? \"block\" : \"none\";\n            this.decryptFailed.style.display = newState.decryptFailed ? \"block\" : \"none\";\n            this.nextBtn.style.display = newState.question && newState.reveal && !newState.done ? \"inline\" : \"none\";\n            this.saveBtn.style.display = newState.question && !newState.reveal ? \"inline\" : \"none\";\n            this.doneText.style.display = newState.reveal && newState.done ? \"inline\" : \"none\";\n            this.saving.style.visibility = newState.unsaved ? \"visible\" : \"hidden\";\n            this.saveError.style.display = newState.saveerror ? \"block\" : \"none\";\n        });\n        this.worker.postMessage({\n            type: \"load\",\n            access_token: access_token,\n            spreadsheetId: spreadsheetId,\n            quizfile: quizfile,\n            quizSettings: quizSettings\n        });\n    }\n}\n\ncustomElements.define(\"app-quiz\", Quiz);\n","// Module\nvar code = \"<progress id=\\\"loading\\\"></progress> <div id=\\\"decryptFailed\\\" style=\\\"display:none\\\"> Decryption failed! </div> <div id=\\\"saveError\\\" style=\\\"display:none\\\"> Error saving the results! </div> <div class=\\\"key\\\" id=\\\"need-key\\\" style=\\\"display:none\\\"> <h1>This quiz is encrypted</h1> <p>Please enter the decryption key.</p> <label for=\\\"key\\\">Decryption key</label> <input id=\\\"key\\\"> <button id=\\\"decrypt\\\">OK</button> </div> <div id=\\\"saving\\\" style=\\\"visibility:hidden\\\"> Your results are being saved, do not close the app. </div> <div class=\\\"question\\\"> <h1 id=\\\"question\\\"></h1> <p> This question <span id=\\\"percent\\\"></span> was asked <span id=\\\"total\\\"></span>. </p> </div> <form class=\\\"answers\\\"> </form> <div class=\\\"controls\\\"> <button id=\\\"save\\\" title=\\\"save the answers\\\">save answers</button> <button id=\\\"next\\\" title=\\\"see the next question\\\">see next question</button> <span id=\\\"done\\\" style=\\\"display:none\\\">Congratulations you are done!</span> </div>\";\n// Exports\nexport default code;"],"names":["renderText","text","m","re","exec","substr","index","replace","length","ArrayToElementRenderer","listElement","keySelector","createElement","keyToElement","elementToKey","constructor","this","Map","WeakMap","update","list","updateElement","keyCache","getKey","d","get","key","set","x","Array","from","children","el","data","find","i","removeChild","before","nextKeyToElement","t","childElement","firstElementChild","prepend","nextElementSibling","insertAdjacentElement","AnswerCheckbox","HTMLElement","reset","input","checked","label","reveal","super","innerHTML","querySelector","connectedCallback","disconnectedCallback","setData","idx","a","setAttribute","id","name","disabled","classList","add","remove","forEach","c","correct","title","customElements","define","Quiz","loading","worker","questionText","form","answerRenderer","encryptionKeyForm","decryptBtn","access_token","spreadsheetId","quizfile","keyInput","decryptFailed","nextBtn","saveBtn","question","doneText","saveError","saving","questionSurface","percent","total","quizSettings","s","addEventListener","ev","postMessage","type","decryptionKey","value","formData","FormData","userAnswers","answers","map","async","Worker","URL","newState","innerText","Math","round","style","display","needKey","done","visibility","unsaved","saveerror"],"sourceRoot":""}