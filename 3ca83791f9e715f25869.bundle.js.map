{"version":3,"sources":["webpack://multiple-choice-quiz/./src/components/AnswerCheckbox/AnswerCheckbox.html","webpack://multiple-choice-quiz/./src/components/Quiz/Quiz.html","webpack://multiple-choice-quiz/./src/utils/ArrayToElementRenderer.ts","webpack://multiple-choice-quiz/./src/components/AnswerCheckbox/AnswerCheckbox.ts","webpack://multiple-choice-quiz/./src/components/Quiz/Quiz.ts"],"names":["module","exports","ArrayToElementRenderer","listElement","keySelector","createElement","this","keyToElement","Map","elementToKey","WeakMap","list","updateElement","keyCache","getKey","d","get","key","set","x","Array","from","children","el","data","find","i","removeChild","before","nextKeyToElement","t","childElement","firstElementChild","prepend","nextElementSibling","insertAdjacentElement","AnswerCheckbox","HTMLElement","super","innerHTML","input","querySelector","label","reveal","checked","idx","a","setAttribute","id","innerText","text","name","disabled","classList","add","remove","forEach","c","correct","title","customElements","define","Quiz","loading","form","answerRenderer","s","encryptionKeyForm","keyInput","decryptBtn","decryptFailed","nextBtn","saveBtn","doneText","saveError","saving","total","percent","questionSurface","addEventListener","ev","worker","postMessage","type","access_token","spreadsheetId","quizfile","decryptionKey","value","formData","FormData","userAnswers","question","answers","map","questionText","Worker","URL","newState","update","setData","reset","Math","round","style","display","needKey","done","visibility","unsaved","saveerror"],"mappings":"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","file":"3ca83791f9e715f25869.bundle.js","sourcesContent":["// Module\nvar code = \"<input type=\\\"checkbox\\\" class=\\\"answer-checkbox__input\\\"> <label class=\\\"answer-checkbox__label\\\"></label> <span class=\\\"answer-reveal\\\"></span>\";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<progress id=\\\"loading\\\"></progress> <div id=\\\"decryptFailed\\\" style=\\\"display:none\\\"> Decryption failed! </div> <div id=\\\"saveError\\\" style=\\\"display:none\\\"> Error saving the results! </div> <div class=\\\"key\\\" id=\\\"need-key\\\" style=\\\"display:none\\\"> <h1>This quiz is encrypted</h1> <p>Please enter the decryption key.</p> <label for=\\\"key\\\">Decryption key</label> <input id=\\\"key\\\"> <button id=\\\"decrypt\\\">OK</button> </div> <div id=\\\"saving\\\" style=\\\"visibility:hidden\\\"> Your results are being saved, do not close the app. </div> <div class=\\\"question\\\"> <h1 id=\\\"question\\\"></h1> <p> This question <span id=\\\"percent\\\"></span> was asked <span id=\\\"total\\\"></span>. </p> </div> <form class=\\\"answers\\\"> </form> <div class=\\\"controls\\\"> <button id=\\\"save\\\" title=\\\"save the answers\\\">save answers</button> <button id=\\\"next\\\" title=\\\"see the next question\\\">see next question</button> <span id=\\\"done\\\" style=\\\"display:none\\\">Congratulations you are done!</span> </div>\";\n// Exports\nmodule.exports = code;","export class ArrayToElementRenderer<T, E extends Element, K>{\n    private keyToElement: Map<K, E>;\n    private elementToKey: WeakMap<E, K>;\n    \n    constructor(private listElement: HTMLElement,\n        private keySelector: (x: T) => K,\n        private createElement: (x: T) => E) {\n        this.keyToElement = new Map<K, E>();\n        this.elementToKey = new WeakMap<E, K>();\n    }\n\n    update(list: T[], updateElement: (x: E, data: T) => void) {\n        let keyCache = new Map<T, K>();\n        let getKey = (d: T) => keyCache.get(d) || (() => {\n            let key = this.keySelector(d);\n            keyCache.set(d, key);\n            return key;\n        })();\n        for (let x of Array.from(this.listElement.children)) {\n            let el: E = <E>x;\n            let data = list.find(i => this.elementToKey.get(el) == getKey(i));\n            if (data) {\n                updateElement(<E>el, data);\n            }\n            else {\n                this.listElement.removeChild(el);\n            }\n        }\n        let before: Element = null;\n        let nextKeyToElement = new Map<K, E>();\n        for (let t of list) {\n            let key = getKey(t);\n            let childElement: E = this.keyToElement.get(key);\n            if (!childElement) {\n                childElement = this.createElement(t);\n                updateElement(childElement, t);\n                this.elementToKey.set(childElement, key);\n            }\n            nextKeyToElement.set(key, childElement);\n            if (null == before && childElement != this.listElement.firstElementChild) {\n                this.listElement.prepend(childElement);\n            }\n            else if (null != before && before.nextElementSibling != childElement) {\n                before.insertAdjacentElement(\"afterend\", childElement);\n            }\n            before = childElement;\n        }\n        this.keyToElement = nextKeyToElement;\n    }\n\n}","import { Answer } from \"../../Question\";\nimport template from \"./AnswerCheckbox.html\";\nimport \"./AnswerCheckbox.scss\";\n\nexport class AnswerCheckbox extends HTMLElement {\n    reset() {\n        this.input.checked = false;\n    }\n    private input: HTMLInputElement;\n    label: HTMLLabelElement;\n    private reveal: HTMLSpanElement;\n\n    constructor() {\n        super();\n        this.innerHTML = template;\n        this.input = this.querySelector(\"input\");\n        this.label = this.querySelector(\"label\");\n        this.reveal = this.querySelector(\".answer-reveal\")\n    }\n\n    connectedCallback() {\n\n    }\n\n    disconnectedCallback() {\n\n    }\n\n    setData(idx: number, a: Answer, reveal: boolean) {\n        this.label.setAttribute(\"for\", this.input.id = `answer-${idx}`);\n        this.label.innerText = a.text;\n        this.input.name = \"\" + idx;\n        this.input.disabled = reveal;\n        if (reveal) {\n            this.classList.add(\"reveal\");\n        }\n        else {\n            this.classList.remove(\"reveal\");\n        }\n        [\"correct\", \"wrong\"].forEach(c => {\n            this.label.classList.remove(c);\n            this.reveal.classList.remove(c);\n        });\n        if (a.correct) {\n            this.reveal.title = \"this is a correct answer\";\n            this.reveal.classList.add(\"correct\");\n            this.label.classList.add(\"correct\");\n        } else {\n            this.reveal.title = \"this is a wrong answer\";\n            this.reveal.classList.add(\"wrong\");\n            this.label.classList.add(\"wrong\");\n        }\n    }\n}\n\ncustomElements.define(\"answer-checkbox\", AnswerCheckbox);\n","import { Answer, Question } from \"../../Question\";\nimport { State } from \"../../State\";\nimport { ArrayToElementRenderer } from \"../../utils/ArrayToElementRenderer\";\nimport { AnswerCheckbox } from \"../AnswerCheckbox/AnswerCheckbox\";\nimport template from \"./Quiz.html\";\nimport \"./Quiz.scss\";\n\nexport class Quiz extends HTMLElement {\n    private loading: HTMLProgressElement;\n    private worker: Worker;\n    private questionText: HTMLHeadingElement;\n    private form: HTMLFormElement;\n    private answerRenderer: ArrayToElementRenderer<[number, Answer], AnswerCheckbox, number>;\n    private encryptionKeyForm: HTMLDivElement;\n    private decryptBtn: HTMLButtonElement;\n    access_token: string;\n    spreadsheetId: string;\n    quizfile: string;\n    private keyInput: HTMLInputElement;\n    private decryptFailed: HTMLDivElement;\n    private nextBtn: HTMLButtonElement;\n    private saveBtn: HTMLButtonElement;\n    question: Question;\n    private doneText: HTMLSpanElement;\n    private saveError: HTMLDivElement;\n    private saving: HTMLDivElement;\n    private questionSurface: HTMLDivElement;\n    private percent: HTMLSpanElement;\n    private total: HTMLSpanElement;\n\n    constructor() {\n        super();\n        this.innerHTML = template;\n        this.loading = this.querySelector(\"#loading\");\n        this.form = this.querySelector(\"form\");\n        this.answerRenderer = new ArrayToElementRenderer(this.form,\n            (s: [number, Answer]) => s[0], () => new AnswerCheckbox());\n        this.encryptionKeyForm = this.querySelector(\"#need-key\");\n        this.keyInput = this.querySelector(\"#key\");\n        this.decryptBtn = this.querySelector(\"#decrypt\");\n        this.decryptFailed = this.querySelector(\"#decryptFailed\");\n        this.nextBtn = this.querySelector(\"#next\");\n        this.saveBtn = this.querySelector(\"#save\");\n        this.doneText = this.querySelector(\"#done\");\n        this.saveError = this.querySelector(\"#saveError\");\n        this.saving = this.querySelector(\"#saving\");\n        this.total = this.querySelector(\"#total\");\n        this.percent = this.querySelector(\"#percent\");\n        this.questionSurface = this.querySelector(\".question\");\n        this.decryptBtn.addEventListener(\"click\", ev => {\n            this.worker.postMessage({\n                type: \"load\",\n                access_token: this.access_token,\n                spreadsheetId: this.spreadsheetId,\n                quizfile: this.quizfile,\n                decryptionKey: this.keyInput.value\n            });\n        });\n        this.nextBtn.addEventListener(\"click\", () => {\n            this.worker.postMessage({\n                type: \"next\"\n            });\n        });\n        this.saveBtn.addEventListener(\"click\", () => {\n            let formData = new FormData(this.form);\n            this.worker.postMessage({\n                type: \"save\",\n                userAnswers: this.question.answers.map((a, idx) => formData.get(\"\" + idx) == \"on\")\n            });\n        });\n    }\n\n    connectedCallback() {\n        this.questionText = this.querySelector(\"#question\");\n    }\n\n    disconnectedCallback() {\n\n    }\n\n    async initialize(access_token: string, spreadsheetId: string, quizfile: string) {\n        this.access_token = access_token;\n        this.spreadsheetId = spreadsheetId;\n        this.quizfile = quizfile;\n        this.worker = new Worker(new URL(\"../../quizworker\", import.meta.url));\n        this.worker.addEventListener(\"message\", ev => {\n            let newState: State = ev.data;\n            if (newState.question) {\n                this.questionText.innerText = newState.question.text;\n                this.answerRenderer.update(newState.question.answers.map((a, idx) => [idx, a]), (c, d) => {\n                    c.setData(d[0], d[1], newState.reveal);\n                    if (!this.question || this.question.id != newState.question.id) {\n                        c.reset();\n                    }\n                });\n                this.total.innerText = `${newState.question.total} ${newState.question.total == 1 ? \"time\" : \"times\"}`;\n                this.percent.innerText = newState.question.total == 0 ? \"\" : `was answered ${Math.round(100 * (newState.question.correct / newState.question.total))}% correctly and`;\n                this.question = newState.question;\n            }\n            this.loading.style.display = newState.loading ? \"block\" : \"none\";\n            this.questionSurface.style.display = newState.question ? \"block\" : \"none\";\n            this.encryptionKeyForm.style.display = newState.needKey ? \"block\" : \"none\";\n            this.decryptFailed.style.display = newState.decryptFailed ? \"block\" : \"none\";\n            this.nextBtn.style.display = newState.question && newState.reveal && !newState.done ? \"inline\" : \"none\";\n            this.saveBtn.style.display = newState.question && !newState.reveal ? \"inline\" : \"none\";\n            this.doneText.style.display = newState.reveal && newState.done ? \"inline\" : \"none\";\n            this.saving.style.visibility = newState.unsaved ? \"visible\" : \"hidden\";\n            this.saveError.style.display = newState.saveerror ? \"block\" : \"none\";\n        });\n        this.worker.postMessage({\n            type: \"load\",\n            access_token: access_token,\n            spreadsheetId: spreadsheetId,\n            quizfile: quizfile\n        });\n    }\n}\n\ncustomElements.define(\"app-quiz\", Quiz);\n"],"sourceRoot":""}