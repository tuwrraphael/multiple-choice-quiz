{"version":3,"sources":["webpack://multiple-choice-quiz/./src/quizworker.ts","webpack://multiple-choice-quiz/./src/utils/Debouncer.ts"],"names":["currentQuiz","answeredQuestions","currentAccessToken","currentSheetId","currentQuizId","state","loading","question","needKey","done","decryptFailed","reveal","unsaved","saveerror","async","stateChange","c","self","postMessage","nextQuestion","shift","s","length","getQuizProgress","access_token","spreadsheetId","quizfile","res","fetch","encodeURIComponent","headers","status","method","body","JSON","stringify","data","json","map","Map","values","i","correct","parseInt","total","isNaN","set","getQuiz","decryptionKey","quiz","blob","salt","Uint8Array","arrayBuffer","iv","cryptext","encoder","TextEncoder","keyMaterial","crypto","subtle","importKey","encode","key","deriveKey","decrypted","decrypt","name","decoder","TextDecoder","line","decode","split","startsWith","text","answers","id","substr","test","push","replace","err","loadAndDecryptQuiz","debouncer","ms","Promise","resolve","setTimeout","aborted","promise","reject","this","abort","aborter","race","timeout","Error","lastSync","addEventListener","ev","type","saveKey","find","d","getDecryptionKey","progress","all","q","p","get","majorDimension","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","shuffle","sort","a","b","initialize","userAnswers","trigger","max","Date","processing","Array","from","valueInputOption","iscorrect","idx","some","v","range","ok","saverror","save"],"mappings":"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","file":"ebfd6259460fb2601641.bundle.js","sourcesContent":["import { Question } from \"./Question\";\nimport { State } from \"./State\";\nimport { Debouncer } from \"./utils/Debouncer\";\n\ninterface AnsweredQuestion extends Question {\n    userAnswers: boolean[];\n}\n\nlet currentQuiz: Question[];\nlet answeredQuestions: AnsweredQuestion[];\nlet currentAccessToken: string = null;\nlet currentSheetId: string = null;\nlet currentQuizId: string = null;\nlet state: State = {\n    loading: true,\n    question: null,\n    needKey: false,\n    done: false,\n    decryptFailed: false,\n    reveal: false,\n    unsaved: false,\n    saveerror: false\n};\n\nfunction shuffle<T>(array: T[]): T[] {\n    let currentIndex: number = array.length;\n    let temporaryValue, randomIndex;\n    while (0 !== currentIndex) {\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n    }\n    return array;\n}\n\nasync function stateChange(c: (s: State) => State) {\n    state = c(state);\n    self.postMessage(state);\n}\n\nfunction nextQuestion() {\n    let question = currentQuiz.shift();\n    stateChange(s => {\n        return {\n            ...s, question: question,\n            loading: false,\n            needKey: false,\n            done: currentQuiz.length < 1,\n            reveal: false\n        };\n    });\n}\n\nasync function initialize(access_token: string, spreadsheetId: string, quizfile: string, decryptionKey?: string) {\n    stateChange(s => {\n        return {\n            ...s,\n            needKey: false,\n            loading: true,\n            done: false,\n            question: null,\n            decryptFailed: false,\n            reveal: false,\n            unsaved: false,\n            saveerror: false\n        };\n    });\n    let saveKey: boolean = !!decryptionKey;\n    if (!decryptionKey) {\n        decryptionKey = await getDecryptionKey(access_token, spreadsheetId, quizfile);\n    }\n    if (!decryptionKey) {\n        stateChange(s => { return { ...s, needKey: true, loading: false }; });\n        return;\n    }\n    let [progress, quiz] = await Promise.all([getQuizProgress(access_token, spreadsheetId, quizfile), getQuiz(quizfile, decryptionKey)]);\n    for (let q of quiz) {\n        let p = progress.get(q.id);\n        if (p) {\n            q.total = p.total;\n            q.correct = p.correct;\n        }\n    }\n    if (saveKey) {\n        let res = await fetch(`https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetId}/values/${encodeURIComponent(\"base!A1:B1\")}:append?valueInputOption=RAW`, {\n            headers: {\n                \"Authorization\": `Bearer ${access_token}`,\n                \"Content-Type\": \"application/json\"\n            },\n            method: \"POST\",\n            body: JSON.stringify({ majorDimension: \"ROWS\", values: [[quizfile, decryptionKey]] })\n        });\n    }\n    currentQuiz = shuffle(quiz);\n    answeredQuestions = [];\n    currentQuiz = currentQuiz.sort((a, b) => {\n        if (a.correct != b.correct) {\n            return a.correct - b.correct;\n        }\n        return a.total - b.total;\n    });\n    nextQuestion();\n    currentAccessToken = access_token;\n    currentSheetId = spreadsheetId;\n    currentQuizId = quizfile;\n}\n\nasync function getDecryptionKey(access_token: string, spreadsheetId: string, quizfile: string) {\n    let res = await fetch(`https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetId}/values/${encodeURIComponent(\"base!A:B\")}`, {\n        headers: {\n            \"Authorization\": `Bearer ${access_token}`\n        }\n    });\n    let data: { values: [string, string][] } = await res.json();\n    if (!data.values) {\n        return null;\n    }\n    let key = data.values.find(d => d[0] == quizfile);\n    if (key) {\n        return key[1];\n    }\n    return null;\n}\n\nasync function getQuizProgress(access_token: string, spreadsheetId: string, quizfile: string) {\n    let res = await fetch(`https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetId}/values/${encodeURIComponent(`${quizfile}!A:B`)}`, {\n        headers: {\n            \"Authorization\": `Bearer ${access_token}`\n        }\n    });\n    if (res.status == 400) {\n        let res = await fetch(`https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetId}:batchUpdate`, {\n            headers: {\n                \"Authorization\": `Bearer ${access_token}`,\n                \"Content-Type\": \"application/json\"\n            },\n            method: \"POST\",\n            body: JSON.stringify({\n                \"requests\": [{\n                    \"addSheet\": {\n                        \"properties\": {\n                            \"title\": quizfile\n                        }\n                    }\n                }]\n            })\n        });\n    }\n    let data: { values: [string, string][] } = await res.json();\n    let map = new Map<number, { correct: number, total: number }>();\n    if (null != data.values) {\n        for (let i = 0; i < data.values.length; i++) {\n            let correct = parseInt(data.values[i][0]);\n            let total = parseInt(data.values[i][1]);\n            if (!isNaN(correct) && !isNaN(total)) {\n                map.set(i + 1, { correct: correct, total: total });\n            }\n        }\n    }\n    return map;\n\n}\n\nasync function* loadAndDecryptQuiz(quizfile: string, decryptionKey: string) {\n    let res = await fetch(`quizzes/${quizfile}`);\n    let blob = await res.blob();\n    const salt = new Uint8Array([18, 182, 224, 94, 67, 153, 88, 240, 68, 90, 143, 209, 190, 39, 25, 237]);\n    let arrayBuffer = await blob.arrayBuffer();\n    let iv = new Uint8Array(arrayBuffer, 0, 12);\n    let cryptext = new Uint8Array(arrayBuffer, 12);\n    let encoder = new TextEncoder();\n    let keyMaterial = await self.crypto.subtle.importKey(\n        \"raw\",\n        encoder.encode(decryptionKey),\n        \"PBKDF2\",\n        false,\n        [\"deriveBits\", \"deriveKey\"]\n    );\n    let key = await self.crypto.subtle.deriveKey(\n        {\n            \"name\": \"PBKDF2\",\n            salt: salt,\n            \"iterations\": 100000,\n            \"hash\": \"SHA-256\"\n        },\n        keyMaterial,\n        { \"name\": \"AES-GCM\", \"length\": 256 },\n        true,\n        [\"encrypt\", \"decrypt\"]\n    );\n    try {\n        let decrypted = await self.crypto.subtle.decrypt(\n            {\n                name: \"AES-GCM\",\n                iv: iv\n            },\n            key,\n            cryptext\n        );\n        let decoder = new TextDecoder(\"utf8\");\n        let question: Question = null;\n        for (let line of decoder.decode(decrypted).split(\"\\n\")) {\n            if (line.startsWith(\"#\")) {\n                if (null != question) {\n                    yield question;\n                }\n                question = {\n                    text: null,\n                    answers: [],\n                    id: parseInt(line.substr(1)),\n                    correct: 0,\n                    total: 0\n                };\n            }\n            else if (question != null && question.text == null) {\n                question.text = line;\n            }\n            else if (/^(F|T)\\:/.test(line)) {\n                if (question == null) {\n                    throw \"no question\";\n                }\n                let correct = false;\n                if (line.startsWith(\"T\")) {\n                    correct = true;\n                }\n                question.answers.push({\n                    text: line.replace(/^(F|T)\\:/, \"\"),\n                    correct: correct\n                });\n            }\n        }\n        if (null != question) {\n            yield question;\n        }\n    }\n    catch (err) {\n        stateChange(s => { return { ...s, needKey: true, decryptFailed: true, loading: false }; });\n        throw err;\n    }\n}\n\nasync function getQuiz(quizfile: string, decryptionKey: string) {\n    const quiz: Question[] = [];\n    for await (const i of loadAndDecryptQuiz(quizfile, decryptionKey)) {\n        quiz.push(i);\n    }\n    return quiz;\n}\n\nlet debouncer = new Debouncer();\nlet lastSync = 0;\n\nasync function save(userAnswers: boolean[]) {\n    stateChange(s => { return { ...s, reveal: true, unsaved: true }; });\n    answeredQuestions.push({ ...state.question, userAnswers: userAnswers });\n    try {\n        await debouncer.trigger(Math.max(5000, 30000 - (+new Date() - lastSync)));\n    }\n    catch {\n        return;\n    }\n    let processing = Array.from(answeredQuestions);\n    answeredQuestions = [];\n    let res = await fetch(`https://sheets.googleapis.com/v4/spreadsheets/${currentSheetId}/values:batchUpdate`, {\n        headers: {\n            \"Authorization\": `Bearer ${currentAccessToken}`,\n            \"Content-Type\": \"application/json\"\n        },\n        method: \"POST\",\n        body: JSON.stringify({\n            valueInputOption: \"RAW\",\n            data: processing.map(q => {\n                let iscorrect = !q.answers.map((a, idx) => q.userAnswers[idx] == a.correct).some(v => !v);\n                return {\n                    range: `${currentQuizId}!A${q.id}:B${q.id}`,\n                    \"majorDimension\": \"ROWS\",\n                    \"values\": [\n                        [iscorrect ? (q.correct + 1) : q.correct, q.total + 1]\n                    ]\n                };\n            })\n        })\n    });\n    if (res.ok) {\n        stateChange(s => { return { ...s, unsaved: false, saveerror: false }; });\n    } else {\n        for (let q of processing) {\n            answeredQuestions.push(q);\n        }\n        stateChange(s => { return { ...s, saverror: true }; });\n    }\n    lastSync = +new Date();\n}\n\nself.addEventListener(\"message\", ev => {\n    if (ev.data.type == \"load\") {\n        initialize(ev.data.access_token, ev.data.spreadsheetId, ev.data.quizfile, ev.data.decryptionKey);\n    } else if (ev.data.type == \"save\") {\n        save(ev.data.userAnswers);\n    } else if (ev.data.type == \"next\") {\n        nextQuestion();\n    }\n})","export class Debouncer {\n    private abort: () => void;\n    constructor() {\n    }\n\n    private timeout(ms: number): Promise<void> {\n        return new Promise((resolve) => {\n            setTimeout(() => {\n                resolve();\n            }, ms);\n        });\n    }\n\n    private aborter() {\n        let status = {\n            aborted: false,\n            promise: <Promise<void>>null\n        };\n        let promise = new Promise<void>((resolve, reject) => {\n            this.abort = () => {\n                status.aborted = false;\n                reject();\n            };\n        });\n        status.promise = promise;\n        return status;\n    }\n\n    async trigger(ms: number): Promise<void> {\n        if (this.abort) {\n            this.abort();\n        }\n        let status = this.aborter();\n        try {\n            await Promise.race([this.timeout(ms), status.promise]);\n        }\n        catch {\n            throw new Error(\"aborted\");\n        }\n    }\n}\n"],"sourceRoot":""}