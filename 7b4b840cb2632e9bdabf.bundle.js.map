{"version":3,"sources":["webpack://multiple-choice-quiz/./src/components/AnswerCheckbox/AnswerCheckbox.html","webpack://multiple-choice-quiz/./src/components/Quiz/Quiz.html","webpack://multiple-choice-quiz/./src/renderText.ts","webpack://multiple-choice-quiz/./src/utils/ArrayToElementRenderer.ts","webpack://multiple-choice-quiz/./src/components/AnswerCheckbox/AnswerCheckbox.ts","webpack://multiple-choice-quiz/./src/components/Quiz/Quiz.ts"],"names":["module","exports","renderText","text","m","re","exec","substr","index","replace","length","ArrayToElementRenderer","listElement","keySelector","createElement","this","keyToElement","Map","elementToKey","WeakMap","list","updateElement","keyCache","getKey","d","get","key","set","x","Array","from","children","el","data","find","i","removeChild","before","nextKeyToElement","t","childElement","firstElementChild","prepend","nextElementSibling","insertAdjacentElement","AnswerCheckbox","HTMLElement","super","innerHTML","input","querySelector","label","reveal","checked","idx","a","setAttribute","id","name","disabled","classList","add","remove","forEach","c","correct","title","customElements","define","Quiz","loading","form","answerRenderer","s","encryptionKeyForm","keyInput","decryptBtn","decryptFailed","nextBtn","saveBtn","doneText","saveError","saving","total","percent","questionSurface","addEventListener","ev","worker","postMessage","type","access_token","spreadsheetId","quizfile","decryptionKey","value","quizSettings","formData","FormData","userAnswers","question","answers","map","questionText","Worker","URL","newState","update","setData","reset","innerText","Math","round","style","display","needKey","done","visibility","unsaved","saveerror"],"mappings":"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","file":"7b4b840cb2632e9bdabf.bundle.js","sourcesContent":["// Module\nvar code = \"<input type=\\\"checkbox\\\" class=\\\"answer-checkbox__input\\\"> <label class=\\\"answer-checkbox__label\\\"></label> <span class=\\\"answer-reveal\\\"></span>\";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<progress id=\\\"loading\\\"></progress> <div id=\\\"decryptFailed\\\" style=\\\"display:none\\\"> Decryption failed! </div> <div id=\\\"saveError\\\" style=\\\"display:none\\\"> Error saving the results! </div> <div class=\\\"key\\\" id=\\\"need-key\\\" style=\\\"display:none\\\"> <h1>This quiz is encrypted</h1> <p>Please enter the decryption key.</p> <label for=\\\"key\\\">Decryption key</label> <input id=\\\"key\\\"> <button id=\\\"decrypt\\\">OK</button> </div> <div id=\\\"saving\\\" style=\\\"visibility:hidden\\\"> Your results are being saved, do not close the app. </div> <div class=\\\"question\\\"> <h1 id=\\\"question\\\"></h1> <p> This question <span id=\\\"percent\\\"></span> was asked <span id=\\\"total\\\"></span>. </p> </div> <form class=\\\"answers\\\"> </form> <div class=\\\"controls\\\"> <button id=\\\"save\\\" title=\\\"save the answers\\\">save answers</button> <button id=\\\"next\\\" title=\\\"see the next question\\\">see next question</button> <span id=\\\"done\\\" style=\\\"display:none\\\">Congratulations you are done!</span> </div>\";\n// Exports\nmodule.exports = code;","function translateFormula(f: string) {\n    return f.replace(/_([^\\{])/g, \"<sub>$1</sub>\")\n        .replace(/_\\{(\\S+?)\\}/g, \"<sub>$1</sub>\")\n        .replace(/\\^([^\\{])/g, \"<sup>$1</sup>\")\n        .replace(/\\^\\{(\\S+?)\\}/g, \"<sup>$1</sup>\");\n}\n\nexport function renderText(text: string) {\n    let re = /\\$(.+?)\\$/g;\n    let m;\n    do {\n        m = re.exec(text);\n        if (m) {\n            text = text.substr(0, m.index) + translateFormula(m[1]) + text.substr(m.index + m[0].length);\n        }\n    } while (m);\n    return text;\n}","export class ArrayToElementRenderer<T, E extends Element, K>{\n    private keyToElement: Map<K, E>;\n    private elementToKey: WeakMap<E, K>;\n    \n    constructor(private listElement: HTMLElement,\n        private keySelector: (x: T) => K,\n        private createElement: (x: T) => E) {\n        this.keyToElement = new Map<K, E>();\n        this.elementToKey = new WeakMap<E, K>();\n    }\n\n    update(list: T[], updateElement: (x: E, data: T) => void) {\n        let keyCache = new Map<T, K>();\n        let getKey = (d: T) => keyCache.get(d) || (() => {\n            let key = this.keySelector(d);\n            keyCache.set(d, key);\n            return key;\n        })();\n        for (let x of Array.from(this.listElement.children)) {\n            let el: E = <E>x;\n            let data = list.find(i => this.elementToKey.get(el) == getKey(i));\n            if (data) {\n                updateElement(<E>el, data);\n            }\n            else {\n                this.listElement.removeChild(el);\n            }\n        }\n        let before: Element = null;\n        let nextKeyToElement = new Map<K, E>();\n        for (let t of list) {\n            let key = getKey(t);\n            let childElement: E = this.keyToElement.get(key);\n            if (!childElement) {\n                childElement = this.createElement(t);\n                updateElement(childElement, t);\n                this.elementToKey.set(childElement, key);\n            }\n            nextKeyToElement.set(key, childElement);\n            if (null == before && childElement != this.listElement.firstElementChild) {\n                this.listElement.prepend(childElement);\n            }\n            else if (null != before && before.nextElementSibling != childElement) {\n                before.insertAdjacentElement(\"afterend\", childElement);\n            }\n            before = childElement;\n        }\n        this.keyToElement = nextKeyToElement;\n    }\n\n}","import { Answer } from \"../../Question\";\nimport { renderText } from \"../../renderText\";\nimport template from \"./AnswerCheckbox.html\";\nimport \"./AnswerCheckbox.scss\";\n\nexport class AnswerCheckbox extends HTMLElement {\n    reset() {\n        this.input.checked = false;\n    }\n    private input: HTMLInputElement;\n    label: HTMLLabelElement;\n    private reveal: HTMLSpanElement;\n\n    constructor() {\n        super();\n        this.innerHTML = template;\n        this.input = this.querySelector(\"input\");\n        this.label = this.querySelector(\"label\");\n        this.reveal = this.querySelector(\".answer-reveal\")\n    }\n\n    connectedCallback() {\n\n    }\n\n    disconnectedCallback() {\n\n    }\n\n    setData(idx: number, a: Answer, reveal: boolean) {\n        this.label.setAttribute(\"for\", this.input.id = `answer-${idx}`);\n        this.label.innerHTML = renderText(a.text);\n        this.input.name = \"\" + idx;\n        this.input.disabled = reveal;\n        if (reveal) {\n            this.classList.add(\"reveal\");\n        }\n        else {\n            this.classList.remove(\"reveal\");\n        }\n        [\"correct\", \"wrong\"].forEach(c => {\n            this.label.classList.remove(c);\n            this.reveal.classList.remove(c);\n        });\n        if (a.correct) {\n            this.reveal.title = \"this is a correct answer\";\n            this.reveal.classList.add(\"correct\");\n            this.label.classList.add(\"correct\");\n        } else {\n            this.reveal.title = \"this is a wrong answer\";\n            this.reveal.classList.add(\"wrong\");\n            this.label.classList.add(\"wrong\");\n        }\n    }\n}\n\ncustomElements.define(\"answer-checkbox\", AnswerCheckbox);\n","import { Answer, Question } from \"../../Question\";\nimport { renderText } from \"../../renderText\";\nimport { State } from \"../../State\";\nimport { ArrayToElementRenderer } from \"../../utils/ArrayToElementRenderer\";\nimport { AnswerCheckbox } from \"../AnswerCheckbox/AnswerCheckbox\";\nimport template from \"./Quiz.html\";\nimport \"./Quiz.scss\";\n\nexport class Quiz extends HTMLElement {\n    private loading: HTMLProgressElement;\n    private worker: Worker;\n    private questionText: HTMLHeadingElement;\n    private form: HTMLFormElement;\n    private answerRenderer: ArrayToElementRenderer<[number, Answer], AnswerCheckbox, number>;\n    private encryptionKeyForm: HTMLDivElement;\n    private decryptBtn: HTMLButtonElement;\n    access_token: string;\n    spreadsheetId: string;\n    quizfile: string;\n    private keyInput: HTMLInputElement;\n    private decryptFailed: HTMLDivElement;\n    private nextBtn: HTMLButtonElement;\n    private saveBtn: HTMLButtonElement;\n    question: Question;\n    private doneText: HTMLSpanElement;\n    private saveError: HTMLDivElement;\n    private saving: HTMLDivElement;\n    private questionSurface: HTMLDivElement;\n    private percent: HTMLSpanElement;\n    private total: HTMLSpanElement;\n    quizSettings: { numberOfQuestions: number; repeat: number; };\n\n    constructor() {\n        super();\n        this.innerHTML = template;\n        this.loading = this.querySelector(\"#loading\");\n        this.form = this.querySelector(\"form\");\n        this.answerRenderer = new ArrayToElementRenderer(this.form,\n            (s: [number, Answer]) => s[0], () => new AnswerCheckbox());\n        this.encryptionKeyForm = this.querySelector(\"#need-key\");\n        this.keyInput = this.querySelector(\"#key\");\n        this.decryptBtn = this.querySelector(\"#decrypt\");\n        this.decryptFailed = this.querySelector(\"#decryptFailed\");\n        this.nextBtn = this.querySelector(\"#next\");\n        this.saveBtn = this.querySelector(\"#save\");\n        this.doneText = this.querySelector(\"#done\");\n        this.saveError = this.querySelector(\"#saveError\");\n        this.saving = this.querySelector(\"#saving\");\n        this.total = this.querySelector(\"#total\");\n        this.percent = this.querySelector(\"#percent\");\n        this.questionSurface = this.querySelector(\".question\");\n        this.decryptBtn.addEventListener(\"click\", ev => {\n            this.worker.postMessage({\n                type: \"load\",\n                access_token: this.access_token,\n                spreadsheetId: this.spreadsheetId,\n                quizfile: this.quizfile,\n                decryptionKey: this.keyInput.value,\n                quizSettings: this.quizSettings\n            });\n        });\n        this.nextBtn.addEventListener(\"click\", () => {\n            this.worker.postMessage({\n                type: \"next\"\n            });\n        });\n        this.saveBtn.addEventListener(\"click\", () => {\n            let formData = new FormData(this.form);\n            this.worker.postMessage({\n                type: \"save\",\n                userAnswers: this.question.answers.map((a, idx) => formData.get(\"\" + idx) == \"on\")\n            });\n        });\n    }\n\n    connectedCallback() {\n        this.questionText = this.querySelector(\"#question\");\n    }\n\n    disconnectedCallback() {\n\n    }\n\n    async initialize(access_token: string, spreadsheetId: string, quizfile: string, quizSettings: { numberOfQuestions: number, repeat: number }) {\n        this.access_token = access_token;\n        this.spreadsheetId = spreadsheetId;\n        this.quizfile = quizfile;\n        this.quizSettings = quizSettings;\n        this.worker = new Worker(new URL(\"../../quizworker\", import.meta.url));\n        this.worker.addEventListener(\"message\", ev => {\n            let newState: State = ev.data;\n            if (newState.question) {\n                this.questionText.innerHTML = renderText(newState.question.text);\n                this.answerRenderer.update(newState.question.answers.map((a, idx) => [idx, a]), (c, d) => {\n                    c.setData(d[0], d[1], newState.reveal);\n                    if (!this.question || this.question.id != newState.question.id) {\n                        c.reset();\n                    }\n                });\n                this.total.innerText = `${newState.question.total} ${newState.question.total == 1 ? \"time\" : \"times\"}`;\n                this.percent.innerText = newState.question.total == 0 ? \"\" : `was answered ${Math.round(100 * (newState.question.correct / newState.question.total))}% correctly and`;\n                this.question = newState.question;\n            }\n            this.loading.style.display = newState.loading ? \"block\" : \"none\";\n            this.questionSurface.style.display = newState.question ? \"block\" : \"none\";\n            this.encryptionKeyForm.style.display = newState.needKey ? \"block\" : \"none\";\n            this.decryptFailed.style.display = newState.decryptFailed ? \"block\" : \"none\";\n            this.nextBtn.style.display = newState.question && newState.reveal && !newState.done ? \"inline\" : \"none\";\n            this.saveBtn.style.display = newState.question && !newState.reveal ? \"inline\" : \"none\";\n            this.doneText.style.display = newState.reveal && newState.done ? \"inline\" : \"none\";\n            this.saving.style.visibility = newState.unsaved ? \"visible\" : \"hidden\";\n            this.saveError.style.display = newState.saveerror ? \"block\" : \"none\";\n        });\n        this.worker.postMessage({\n            type: \"load\",\n            access_token: access_token,\n            spreadsheetId: spreadsheetId,\n            quizfile: quizfile,\n            quizSettings: quizSettings\n        });\n    }\n}\n\ncustomElements.define(\"app-quiz\", Quiz);\n"],"sourceRoot":""}